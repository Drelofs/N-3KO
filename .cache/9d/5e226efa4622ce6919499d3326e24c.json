{"id":"../node_modules/phaser/src/renderer/snapshot/index.js","dependencies":[{"name":"/Users/julia/Documents/GitHub/N-3KO/package.json","includedInParent":true,"mtime":1557756471451},{"name":"/Users/julia/Documents/GitHub/N-3KO/node_modules/phaser/package.json","includedInParent":true,"mtime":1557756490182},{"name":"./CanvasSnapshot","loc":{"line":32,"column":20},"parent":"/Users/julia/Documents/GitHub/N-3KO/node_modules/phaser/src/renderer/snapshot/index.js","resolved":"/Users/julia/Documents/GitHub/N-3KO/node_modules/phaser/src/renderer/snapshot/CanvasSnapshot.js"},{"name":"./WebGLSnapshot","loc":{"line":33,"column":19},"parent":"/Users/julia/Documents/GitHub/N-3KO/node_modules/phaser/src/renderer/snapshot/index.js","resolved":"/Users/julia/Documents/GitHub/N-3KO/node_modules/phaser/src/renderer/snapshot/WebGLSnapshot.js"}],"generated":{"js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @callback SnapshotCallback\r\n *\r\n * @param {(Phaser.Display.Color|HTMLImageElement)} snapshot - Either a Color object if a single pixel is being grabbed, or a new Image which contains a snapshot of the canvas contents.\r\n */\r\n\r\n/**\r\n * @typedef {object} SnapshotState\r\n *\r\n * @property {SnapshotCallback} callback - The function to call after the snapshot is taken.\r\n * @property {string} [type='image/png'] - The format of the image to create, usually `image/png` or `image/jpeg`.\r\n * @property {number} [encoderOptions=0.92] - The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`.\r\n * @property {integer} [x=0] - The x coordinate to start the snapshot from.\r\n * @property {integer} [y=0] - The y coordinate to start the snapshot from.\r\n * @property {integer} [width] - The width of the snapshot.\r\n * @property {integer} [height] - The height of the snapshot.\r\n * @property {boolean} [getPixel=false] - Is this a snapshot to get a single pixel, or an area?\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Renderer.Snapshot\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    Canvas: require('./CanvasSnapshot'),\r\n    WebGL: require('./WebGLSnapshot')\r\n\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/phaser/src/renderer/snapshot/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"../node_modules/phaser/src/renderer/snapshot/index.js":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2019 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\n/**\r\n * @callback SnapshotCallback\r\n *\r\n * @param {(Phaser.Display.Color|HTMLImageElement)} snapshot - Either a Color object if a single pixel is being grabbed, or a new Image which contains a snapshot of the canvas contents.\r\n */\r\n\r\n/**\r\n * @typedef {object} SnapshotState\r\n *\r\n * @property {SnapshotCallback} callback - The function to call after the snapshot is taken.\r\n * @property {string} [type='image/png'] - The format of the image to create, usually `image/png` or `image/jpeg`.\r\n * @property {number} [encoderOptions=0.92] - The image quality, between 0 and 1. Used for image formats with lossy compression, such as `image/jpeg`.\r\n * @property {integer} [x=0] - The x coordinate to start the snapshot from.\r\n * @property {integer} [y=0] - The y coordinate to start the snapshot from.\r\n * @property {integer} [width] - The width of the snapshot.\r\n * @property {integer} [height] - The height of the snapshot.\r\n * @property {boolean} [getPixel=false] - Is this a snapshot to get a single pixel, or an area?\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Renderer.Snapshot\r\n */\r\n\r\nmodule.exports = {\r\n\r\n    Canvas: require('./CanvasSnapshot'),\r\n    WebGL: require('./WebGLSnapshot')\r\n\r\n};\r\n"},"lineCount":36}},"error":null,"hash":"520fc2c6501a186cb1238402d3d764bf","cacheData":{"env":{}}}